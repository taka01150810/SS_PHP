<?php
//5.5 ファイルシステム関数
/*
ファイルシステム関数は、ファイルシステム上のフォルダー（ディレクトリ）やファイルを操作するための関数です。
フォルダー／ファイルの情報を取得する、ファイルへの読み書きを行うなど、さまざまな機能を提供します。
ここでは、その中でも特によく利用すると思われる「ファイルへの読み書き」につい
*/

//5.1.1 テキストファイルへの書き込み
/*
下記はアクセスログ情報をタブ区切りテキストの形式でテキストファイルに書き込むコードです。
具体的には、アクセス日時、アクセスしたスクリプトのパス、クライアントの種類、リンク元のアドレスといった情報を書き込みます。
*/
//書き込み内容を配列$dataにセット
$data[] = date('Y/m/d H:i:s');
$data[] = $_SERVER['SCRIPT_NAME'];//アクセスしたスクリプトのパス
$data[] = $_SERVER['HTTP_USER_AGENT'];//クライアントの種類
$data[] = $_SERVER['HTTP_REFERER'];//リンク元のアドレス
//access.logを追記書き込みモードでオープン
$file = @fopen('access.log', 'a') or die('ファイルを開けませんでした');
//ファイルのロック
flock($file, LOCK_EX);
//ファイルの書き込み
fwrite($file, implode("\t", $data) . "\n");
//ロックの解除
flock($file, LOCK_UN);
//フェイルのクローズ
fclose($file);
print 'アクセスログを記録しました';

/* ファイル書き込みに手順
以降では、ファイル書き込みの基本手順として、次の一連の流れを追っていくことにします。
1.ファイルを開く
2.ファイルをロックする
3.ファイルに対して書き込みを行う
4.ファイルを閉じる（ロックを解除する）
*/

//5.5.2 ファイルを開く　fopen/fclose関数
/* 構文
fopen($filename, $mode[$use_include_path])

$filename：ファイルのパス
$mode：オープンモード
$use_include_path：include_pathパラメーターを利用するか
*/
/*
fopen関数は、ファイルのオープンに成功すると、戻り値としてファイルハンドルを返します。
ファイルハンドルとは、名前のとおり、そのファイルを操作（handle）するためのキーとなる情報です。
今後、ファイルに対する読み書きは、このファイルハンドルに対して行うことになります。
*/

/* 構文
fclose($stream)

$stream: ファイルハンドル
*/
/*
ファイルのクローズはスクリプトの終了時に自動的に行われるので、必ずしも必須というわけではありませんが
使ったものは片付ける癖をつけておくのは悪いことではありません。
*/

//5.5.3 fopen関数でのエラー処理 エラー制御演算子
/*
die($status)

$status: 終了時に表示する文字列
*/
/*
die関数は、指定されたメッセージを出力して、スクリプトを強制終了するための関数です。
つまり「@fopen……ordie……」とは、「ファイルを開きなさい、さもなければ（or）終了しなさい」と言っているわけです。
*/
$file = @fopen('access.log', 'ab') or die('ファイルを開けませんでした');

//5.5.4 ファイルの書き込み fwrite関数
/* 構文
fwrite($handle, $string[$length])

$handle：書き込み対象のファイルハンドル
$string：書き込む文字列
$length：書き込む文字列の長さ
*/
$data[] = date('Y/m/d H:i:s');
$data[] = $_SERVER['SCRIPT_NAME'];//アクセスしたスクリプトのパス
$data[] = $_SERVER['HTTP_USER_AGENT'];//クライアントの種類
$data[] = $_SERVER['HTTP_REFERER'];//リンク元のアドレス

fwrite($file, implode("\t", $data) . "\n");
/*
アクセス日時、アクセスしたスクリプトのパス、クライアントの種類、リンク元のアドレスを配列に格納しておき、タブ（\t）区切りで連結したものをファイルに書き込んでいます。
このように、決まった区切り文字のテキストを生成するにはimplode関数を利用するのが便利です。
行の終わりには、改行文字（\n）を指定するのを忘れないようにしてください。
*/