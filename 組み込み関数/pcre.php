<?php
/*
正規表現（RegularExpression）とは「あいまいな文字列パターンを表現するための記法」です。
わかりやすくするために、あえて語弊を恐れずに言うならば、「ワイルドカードをもっと高度にしたもの」と言い換えてもよいかもしれません。
ワイルドカードとは、たとえばWindowsのエクスプローラーなどでファイルを検索するために使う「*.php」「*day*.php」といった表現です。
「*」は0文字以上の文字列を意味しているので、「*.php」であれば「a.php」や「abc.php」のようなファイル名を表しますし
「*day*.php」なら「day.php」や「day01.php」「today00.php」のように、ファイル名に「day」という文字を含む.phpファイルを表します。

ワイルドカードは比較的なじみのあるものだと思いますが、あくまでシンプルを旨としているため、あまり複雑なパターンは表現できません。そこで登場するのが正規表現です。
たとえば、[0-9]{3}-[0-9]{4}という正規表現は一般的な郵便番号を表します。
「0～9の数値3桁」＋「－」＋「0～9の数値4桁」という文字列のパターンを、これだけ短い表現の中で表しているわけです。

しかし、正規表現を利用すれば、正規表現パターンと比較対象の文字列を指定するだけで、あとは両者が合致するかどうかを正規表現エンジンが判定してくれるのです。
単にマッチするかどうかの判定だけではありません。正規表現を利用すれば、たとえば、掲示板への投稿記事から有害なHTMLタグだけを取り除いたり、任意の文書からURL文字列だけを取り出したり
あるいはHTMLから<mata>タグの情報だけを取り出してリストを作成したり、といったこともできます。

正規表現とは、HTMLやテキストファイルなど、散文的な（ということは、コンピューターにとって再利用するのが難しい）データを、
ある定型的な形式に沿って抽出し、データとしての洗練度を向上させる──言わば、人間のためのデータと、システムのためのデータをつなぐ
橋渡し的な役割を果たす存在とも言える。
*/

//5.4.1 正規表現の基本
/*
正規表現によって表されたある文字列パターンのことを正規表現パターンと言います。
また、与えられた正規表現パターンが、ある文字列の中に含まれる場合、文字列が正規表現パターンにマッチすると言います。
*/

/* 基本
XYZ ... XYZという文字列,
[XYZ] ... XYZいずれかの文字,
[^XYZ] ... X,Y,Z以外のいずれかの文字
[X-Z] ... X〜Zの範囲の中の一文字
[X|Y|Z] ... X,Y,Zのいずれか
*/

/* 量指定
X* ... 0文字以上のX("son*n"の場合"sn","son","soon","sooon"などにマッチ)
X? ... 0文字、または1文字のX("so+n"の場合"sn","son"にマッチ)
X+ ... 1文字以上のX("son+n"の場合"son","soon","sooon"などにマッチ)
X{n} ... Xとn回以上一致("son{2}n"の場合"soon","sooon"にマッチ)
X{m.n} ... Xとm〜n回一致("so{2.3}nの場合"soon""sooon"にマッチ)
*/

/* 位置指定
^ ... 行の先頭に一致
$ ...  行の末尾に一致
\A ... 文字列の先頭に一致
\z ... 文字列の末尾に一致
\Z ... 文字列の末尾、または末尾の改行に一致
*/

/* 文字セット
. ... 任意の一文字
\w ... 単語以外、数字、アンダースコアに一致
\W ... 文字以外に一致("[^\w]"と同意)
\d ... 10進数値に一致
\D ... 数字以外に一致("[^\d]"と同意)
\n ... 改行に一致
\r ... 復帰に一致
\t ... タブ文字に一致
\s ... 空白文字に一致
\S ... 空白以外の文字に一致("[^\s]"と同意)
*/

/*
http(s)?://([\w]+\.)+[\w]+(/[\w./?%&=]*)?

「(s)?」は、「s」が0～1回登場することを意味します。つまり、「http://」または「https://」にマッチします。

「([\w]+\.)+[\w]+」は、英数字／アンダースコア（\w）、ハイフンで構成される文字列で、途中にピリオド（\.）を含むことを意味します。
「(/[\w./?%&=]*)?」で後続の文字列が英数字、アンダースコア（\w）、その他の記号（?、%、&、=、など）を含む文字から構成されることを意味します。
*/