<?php

/*
プログラム上で扱う対象をオブジェクト（モノ）に見立てて、
オブジェクトを中心にコードを組み立てていく手法のことをオブジェクト指向プログラミングと言います。
近年ではオブジェクト指向プログラミングの隆盛に伴い、PHPでもオブジェクト指向プログラミングに対応した
オブジェクト指向型のライブラリ（クラスライブラリ）が多く提供されるようになっています。
*/

//7.1 オブジェクト指向プログラミングの基本
//7.1.1 クラスと関数/変数
/*
関数とは与えられた入力（引数）に対して、処理結果を戻り値として出力するだけの仕組みでした。
データは関数を通過していくだけで、その中に留まるものではありません。
これに対して、クラス（オブジェクト）は自分自身でデータを持つことができます。
処理前、または処理後のデータを保存しておき、必要に応じて別の用途で利用できるのです。

変数は データ保持○ データ処理×
関数は データ保持× データ処理○
クラス/オブジェクト データ保持○ データ処理○
*/

//7.1.2 クラスとオブジェクトの関係
/*
クラスとオブジェクトは本質的には異なる。
クラスをモノの作りを表す「設計図」や「金型」であるとするならば
オブジェクトは設計図や金型をもとに作られた実際のモノです。
なので同一のクラスは一つしか存在しません。
クラスを元に作られたオブジェクトは複数存在する可能性があります。
*/

//7.1.3 インスタンス化とメンバーの呼び出し
/*
クラスをもとにしてコピーを作る作業のことをインスタンス化、インスタンス化によってできる複製のことをインスタンス（オブジェクト）と呼びます。
インスタンス化とは、クラスを扱うために「自分専用の領域」を確保する行為と言ってもよいでしょう。
クラスをインスタンス化するには、new演算子を利用します。
*/
/* 構文
$変数名 = new クラス名([引数,……])
*/

/*
インスタンス化によってできたオブジェクトは「$変数名」に格納されます。オブジェクトが格納された変数のことをオブジェクト変数と呼ぶ場合もあります。
クラス（オブジェクト）に属する関数と変数のことを、それぞれメンバー関数／メンバー変数、またはメソッド／プロパティと呼びます。
オブジェクトのメソッド／プロパティは、それぞれアロー演算子（－>）で呼び出せます
*/
/* 構文
[戻り値=]オブジェクト変数->メソッド名([引数,……])
オブジェクト変数->プロパティ名[=値]
*/

//null安全演算子（?->）
/*
PHP8以降では、「?->」（null安全演算子）が追加され、「オブジェクトが非nullのときだけ、そのメンバーにアクセスしたい」
（＝nullの場合はそのままnullを返したい）という状況に対応できるようになりました。
*/
$dt = null;
print $dt?->format('Y年m月d日g:i:s');
//結果 何も表示されない($dtがnullでもエラーにならない)
/*
PHP7までは、以下のように変数$dtがnullであるかどうかを判定してから、メソッドにアクセスしなければなりませんでした。
*/
$dt = null;
$result = null;
//$dtがnullでない場合にだけformatメソッドにアクセス
if($dt !== null){
    $result = $dt->format('Y年m月d日g:i:s');
}