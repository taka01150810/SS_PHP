<?php
//4.2 繰り返し文
/*
PHPの繰り返し構文には、while／do～while、for／foreach命令など、よく似た命令がいくつか存在します。
単に個々の構文を理解するだけでなく、それぞれの違いを理解するように学習を進めてください。
*/

//4.2.1 while／do～while命令
/*
while命令

while(条件式){
    //条件式がtrueである間、繰り返し実行する処理
}
*/
$i = 1;
while($i < 6){
    print "{$i}番目のループです。<br/>";
    $i++;
}
//結果 1番目のループです。〜5番目のループです。

/*
do～while命令
do{
    //条件式がtrueである間、繰り返し実行する処理
}while(条件式);
*/
$i_1 = 1;
do{
    print "{$i_1}番目のループです。<br/>";
    $i_1++;
}while($i_1 < 6);
//結果 1番目のループです。〜5番目のループです。
print '<br/>';
/*
結果だけを見ると、while命令もdo～while命令も同じ動きをしているように思えるかもしれません。
しかし $i_1 = 6にすると
*/
$i_2 = 6;
while($i_2 < 6){
    print "{$i_2}番目のループです。<br/>";
    $i_2++;
}
//結果 何もなし

$i_3 = 6;
do{
    print "{$i_3}番目のループです。<br/>";
    $i_3++;
}while($i_3 < 6);
//結果 6番目のループです。

//4.2.2 無限ループ
/*
無限ループとは、永遠に終了しない──終了条件がtrueにならないループのことです。
たとえば、上のwhile文から「$i++;」を削除またはコメントアウトしてみましょう。
ブラウザーが読み込み状態になったきり、応答がなくなってしまうはずです。
このような無限ループはサーバーに極端な負荷を与え、最悪の場合、コンピューターそのものをフリーズさせる原因にもなります。
ループ処理を記述する場合には、まずループが本当に終了するのかをきちんと確認するようにしてください。
*/

//4.2.3 for命令
/*
for(初期化式;継続条件式;増減式){
    //ループ内で実行する処理
}
*/
for($i_4 = 1; $i_4 < 6; $i_4++){
    print "{$i_4}番目のループです。<br />";
}
//結果 1番目のループです。〜5番目のループです。

/*
for命令の注意点
*/
//(1)無限ループはfor命令でも発生する。
/*
for($i = 1;$i < 6; $i--){

}
カウンター変数$iの初期値が1で、その後は「$i」で減算されていくだけなので、条件式「$i<6」がfalseになることは永遠にないからです。
*/
/*
for($i = 1; ;$i++){

}//継続条件式を省略

for( ; ; ){

}//すべての式を省略
継続条件式が省略されると、for命令は無条件にtrue（継続）とみなすためです。
*/

//(2)カウンター変数に浮動小数点型を利用しない
for($i = 0.01;$i <= 1.00;$i += 0.01){
    //小数点以下16桁まで表示（printf関数）
    printf('%0.16f<br/>',$i);
}
/*
浮動小数点型では0.01を厳密に表現できません。
そのため、わずかながら演算誤差が発生し、ループは99回で終了してしまいます。
また、出力した変数iの値も正しくありません。
*/

//(3)ブロック配下でカウンター変数を操作しない
for($i = 1;$i <= 10;$i++){
    if($i % 2 == 0){
        $i++;
    }
    print "{$i}<br/>";
}//実行結果1 3 5 7 9 11
/*
これはいくつかの点で問題があります。まず、変数$iの変化を追うのが、こんなに単純なコードであるにもかかわらず、困難です。
また、バグも混入しています。
本来、変数$iの上限は10であることを想定していますが、サンプルを実行すると、上限を超えて11まで出力されます。
カウンター変数を操作したことによる問題の一例ですが、まずは、カウンター変数は増減式でのみ更新することを原則としてください。
*/

//4.2.4 カンマ演算子
/*
カンマ演算子（,）を利用することで、初期化式、継続条件式、増減式に複数の式を指定することもできます。
カンマで区切られた式は先頭から順に実行されます。
*/
for( $i = 1; $i < 6; print "{$i}番目のループです。<br/>", $i++);
//結果 1番目のループです。〜5番目のループです。

for($i = 1,$j = 1;$result = $i * $j, $i < 6; $i++, $j++){
    print "{$i} * {$j} = {$result}<br/>";
}
//結果 1×1＝1 2×2＝4 3×3＝9 4×4＝16 5×5＝25