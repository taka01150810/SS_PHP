<?php
/*
変数とは「データの入れ物」です。入れ物なので、当然、スクリプトの実行途中でその中身を入れ替えることもできます。
一方、入れ物と中身がワンセットになっていて、途中で中身を変更できない入れ物のことを定数と言います
*/

// 2.2.1 定数の基本
$price = 10000;
$sum = $price * 1.1;
print $sum;
print '<br/>';


// 一見普通のコードに見えますが、このコードにはいくつかの問題があります。
/*
問題点① 値の意味が曖昧である
 → コードが複雑になってくれば、1.1が値上げ率を表すのか、サービス料金を表すのか、それとも、まったく異なる何かなのか、汲み取りにくくなります。
*/
/*
問題点② 値の修正に弱い
 → 将来的に、消費税が12％、15％と変化したら、どうでしょうか。しかも、その際に、コードのそちこちに1.1という値が散在していたら？
*/

const TAX = 1.1;
$price = 1000;
$sum = $price * TAX;
print $sum;//結果：1100

//2.2.2 定数のルール
/*
（1）名前の先頭に「$」は付けない変数とは異なり、1文字目の「$」は不要です。
「$TAX」ではなく、そのまま「TAX」のように命名します。

（2）名前は、PHPで意味を持つ予約語でないこと予約語については2.1.3項で触れたとおりです。
予約語は、定数だけでなく、関数、クラス／インターフェイス（後述）などの名前としても利用できません。
変数名は先頭に「$」が付くので、例外的に「$if」のような名前も可能ですが、混乱するだけで、あえて利用する意味はありません。
（変数の場合はmustnotではありませんが、shouldnotです）。

（3）すべて大文字で命名する構文規則ではありませんが、定数は変数と区別しやすいようにすべて大文字で命名するのが通例です。
複数の単語を含むような名前を付けたい場合には、「CONSUMPTION_TAX」のようにアンダースコア（_）で区切ります。

（4）利用できる型は限定される型とは、データの種類を識別するための情報です。
具体的には、以下の型だけを利用できます。整数（int）、小数（float）、文字列（string）、true／false（bool）、null、以上の値を含んだ配列

*/

?>