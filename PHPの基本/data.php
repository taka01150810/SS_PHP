<?php
/*
データ型（型）とは、データの種類のことです。
PHPでは、実にさまざまなデータをコードの中で扱えます。
たとえば、「abc」や「イロハ」は文字列型、1や10は数値型、true（真）やfalse（偽）は真偽型に分類できます。
プログラミング言語には、このデータ型を強く意識するものと、逆にほとんど意識する必要がないものとがあります。
PHPは後者に属する言語です。つまり、データ型に対して寛容です。最初に文字列を格納した変数にあとから数字をセットしてもかまいませんし、その逆も可能です。
そのため、次のようなスクリプトもPHPでは正しいコードです。
*/

$data = '10日でおぼえるPHP入門教室';
$data = 2920;//文字列が代入された変数に数値を代入
print $data;

/*
しかし開発者がデータ型をまったく意識しなくてよいというわけではありません。
PHPで扱える主なデータ型はスカラー型、複合型、特殊型。
スカラー型とは、1つの変数（入れ物）で1つの値だけを扱うことができるものを言う。データ型の中でも最も基本的なものである。
スカラー型と対照的なのが複合型で、この型は1つの変数で複数の値をまとめて扱える。
特殊型は、スカラー型／複合型のいずれにも分類できない特殊な値を表す型のことである。
*/

// 2.3.1 論理リテラル（bool）
/*
論理型は、スカラー型の中でも最も単純な型で、真（正しい）か偽（間違い）のいずれかの状態しか持ちません。
falseキーワードだけがfalseを表すわけではない。
*/

// 2.3.2 整数リテラル（int)
/*
10進数,16進数(0xで始まる値),8進数(0で始まる値)やマイナス、0など
*/

//2.3.3 浮動小数点数リテラル（float）
/*
浮動小数点数リテラルは、整数リテラルに比べると少しだけ複雑です。
一般的な「1.41421356」のような小数点数だけでなく、指数表現が存在するからです。
指数表現とは、＜仮数部＞e＜符号＞＜指数部＞の形式で表されるリテラルのことです。
＜仮数部＞×10の＜符号＞＜指数部＞で、本来の小数値に変換できます。

1.4142e10 ➡ 1.4142×10の10条 ➡ 14142000000.01.
173205e7 ➡ 1.173205×10の-7条 ➡ 0.0000001173205

*/

//(補足) 数値セパレーター
/*
PHP7.4以降では、桁数の大きな数値の可読性を改善するために、数値リテラルの中に桁区切り文字（_）を記述できるようになりました（数値セパレーター）。
日常的に利用する桁区切り文字である「,」でないのは、PHPにおいてカンマはすでに別の意味を持っているためです。
*/
print '<br/>';
$value = 1_234_567;
print $value;//結果 1234567

print '<br/>';
$pi=3.141_592_653_59;
print $pi;//結果 3.14159265359

print '<br/>';
$num=0.123_456e10;
print $num;//結果 1234560000

//2.3.4 文字列リテラル
/*
文字列リテラルを表すには、文字列全体をシングルクォート（'）、またはダブルクォート（"）でくくります。
*/
print '<br/>';
print 'こんにちは、PHP';//結果 こんにちは、PHP
print '<br/>';
print "こんにちは、PHP";//結果 こんにちは、PHP

//文字列リテラルには「'」「"」そのものを含めることはできない。
// print "You are "GREAT" teacher!!" ;　//結果　エラー

//このような場合は、以下のように対処できます。
//（1）文字列に含まれないほうのクォートでくくる
print '<br/>';
print 'You are "GREAT" teacher!!';//結果 You are "GREAT" teacher!!

//（2）クォート文字をエスケープ処理する
//（1）の方法では、文字列にシングルクォート／ダブルクォート双方が含まれる場合に対処できません。
// print'He's"GREAT"teacher!!';　//結果　エラー
// このようなケースでは、文字列に含まれるクォート文字をエスケープ処理します。
// エスケープ処理とは「ある文脈の中で意味を持つ文字を、あるルールに基づいて無効化する（無意味にする）」ことを言います。
print '<br/>';
print 'He\'s"GREAT"teacher!!';//結果 He's"GREAT"teacher!!
print '<br/>';

//2.3.5 シングルクォート文字列とダブルクォート文字列の違い
$title = 'サーバーサイド技術の学び舎WINGS';
$data1 = "サポートサイト\t「{$title}」へ<br/>";
$data2 = 'サポートサイト\t「{$title}」へ<br/>';
print $data1;//結果 サポートサイト 「サーバーサイド技術の学び舎WINGS」へ
print '<br/>';
print $data2;//結果 サポートサイト\t「{$title}」へ

/*
ダブルクォート文字列リテラルでは、文字列に含まれる変数を解釈し、その値で変数の箇所を置き換えます。
（1）変数を展開するか
変数全体を{  }で囲んでいるのは、変数の範囲を明確にするためである。

（2）エスケープシーケンスを認識するか
PHPでは、タブや改行など特殊な意味を持つ（ディスプレイに表示できないなどの）文字を「\文字」の形式で表現できます。
このような文字のことをエスケープシーケンスと言います。\t = 水平タブ
文字列リテラルの最後で、「\」を表示させたい場合には、シングルクォートでくくる場合も「\\」のように表記します。
*/

// $str = 'エスケープシーケンスを表すのは\';//結果 エラー
$str = 'エスケープシーケンスを表すのは\\';//結果 エスケープシーケンスを表すのは\
print $str;

print '<br/>';
//2.3.6 ヒアドキュメント
/*
文字列リテラルを表すもう1つの方法として、ヒアドキュメントという仕組みがあります。
ヒアドキュメントは、改行を含むような長い文字列を表すのに適した記法です。
ヒアドキュメントでは「<<<EOD」から「EOD;」までを文字列リテラルとみなします。
*/
$str='PHP（PHP:HypertextPreprocessor）';
$msg = <<<EOD
{$str}は、サーバーサイドで動作する簡易なスクリプト言語です。まずは、本書でじっくり基礎固めしましょう。<br/>
"Let's start, everyone!!"
EOD;
print $msg;
/*
結果 PHP（PHP:HypertextPreprocessor）は、サーバーサイドで動作する簡易なスクリプト言語です。まずは、本書でじっくり基礎固めしましょう。
"Let's start, everyone!!"
*/

print '<br/>';

//(補足) 補足インデントの除去
//ヒアドキュメントでは、先頭部分空白が除去される。
$msg_intend_remove = <<<EOD
  {$str}は、サーバーサイドで動作する簡易なスクリプト言語です。
  まずは、本書でじっくり基礎固めしましょう。<br/>
  "Let's start,everyone!!"
  EOD;
print $msg_intend_remove;
/*
結果 PHP（PHP:HypertextPreprocessor）は、サーバーサイドで動作する簡易なスクリプト言語です。まずは、本書でじっくり基礎固めしましょう。
"Let's start, everyone!!"
*/

// $msg_intend_remove = <<<EOD
//   {$str}は、サーバーサイドで動作する簡易なスクリプト言語です。
//   まずは、本書でじっくり基礎固めしましょう。<br/>
// "Let's start,everyone!!"
//   EOD;
// print $msg_intend_remove;

/*
結果 Invalid body indentation level (expecting an indentation level of at least 2)」（不正なインデント階層（少なくとも2個のインデントが必要））
*/

//2.3.7 null
$n1; //値が代入されていないのでnull
$n2 = null;// 明示的にnullを代入
print $n1;//結果 Undefined variableエラー
print $n2;//結果 何もなし

?>